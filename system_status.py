# system_status.py
import subprocess
import time
from oled_ui import update_status_data
import serial
import logging
from esp_flasher import get_mac_address
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É INA219
from adafruit_ina219 import INA219
import board
import busio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ I2C –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è INA219
i2c_bus = busio.I2C(board.SCL, board.SDA)
ina = INA219(i2c_bus)

from collections import deque
import statistics

voltage_history = deque(maxlen=60)
last_percent = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏

MIN_VOLTAGE = 3.3     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (0%)
MAX_VOLTAGE = 4.2     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (100%)
CHANGE_THRESHOLD = 1  # –ü–æ—Ä–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)

charging_icon = [""]  # –ë—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ status_updater


PORT = "/dev/ttyS0"

def voltage_to_percent(v):
    lut = [
        (4.160, 100),
        (4.117, 95),
        (4.074, 90),
        (4.031, 85),
        (3.988, 80),
        (3.945, 75),
        (3.902, 70),
        (3.859, 65),
        (3.816, 60),
        (3.773, 55),
        (3.730, 50),
        (3.687, 45),
        (3.644, 40),
        (3.601, 35),
        (3.558, 30),
        (3.515, 25),
        (3.472, 20),
        (3.429, 15),
        (3.386, 10),
        (3.343, 5),
        (3.300, 0),
    ]

    for i in range(len(lut) - 1):
        v1, p1 = lut[i]
        v2, p2 = lut[i + 1]
        if v1 >= v >= v2:
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            percent = p1 + (v - v1) * (p2 - p1) / (v2 - v1)
            return round(percent)

    # –ù–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
    if v < lut[-1][0]:
        return 0
    # –í—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    if v > lut[0][0]:
        return 100

def get_adjusted_voltage():
    voltage = ina.bus_voltage
    current = ina.current
    if current < -20:  # –ó–∞—Ä—è–¥–∫–∞ ‚Äî —Ç–æ–∫ –∏–¥—ë—Ç –≤–Ω—É—Ç—Ä—å
        voltage -= 0.02  # –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞: 20‚Äì50 –º–í –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–π –±–∞—Ç–∞—Ä–µ–∏
    return voltage


def is_charging():
    try:
        current = ina.current  # –º–ê
        print(f"[INA219] Current = {ina.current} –º–ê")
        return current < -5  # –ó–∞—Ä—è–¥–∫–∞: —Ç–æ–∫ –≤—Ö–æ–¥–∏—Ç –≤ –±–∞—Ç–∞—Ä–µ—é (–º–æ–∂–µ—à—å –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ—Ä–æ–≥–æ–º)
    except Exception as e:
        print(f"[INA219] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–∞: {e}")
        return False


def get_battery_status():
    try:
        voltage = get_adjusted_voltage()
        print(f"ina.bus_voltage = {voltage}")
        voltage_history.append(voltage)

        if len(voltage_history) < voltage_history.maxlen:
            return "--%"

        median_voltage = statistics.median(voltage_history)
        rounded_percent = voltage_to_percent(median_voltage)

        if last_percent[0] is None or abs(rounded_percent - last_percent[0]) >= CHANGE_THRESHOLD:
            last_percent[0] = rounded_percent

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
        if median_voltage < 3.3:
            print(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {median_voltage:.2f} –í ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ")

        return f"{last_percent[0]}%"
    except Exception as e:
        print(f"[INA219] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "--%"


def get_wifi_signal():
    try:
        result = subprocess.run(['iwconfig', 'wlan0'], capture_output=True, text=True)
        signal_line = [line for line in result.stdout.splitlines() if "Signal level" in line]
        if signal_line:
            signal_level = int(signal_line[0].split("Signal level=")[1].split(" dBm")[0])
            return signal_level
    except Exception as e:
        print(f"Wi-Fi error: {e}")
    return None


def signal_to_bars(signal_level):
    if signal_level is None:
        return 0
    if signal_level <= -100:
        return 0
    elif signal_level >= -50:
        return 5
    else:
        return int((signal_level + 100) / 10)


def get_wifi_status():
    signal_level = get_wifi_signal()
    if signal_level is not None:
        signal_bars = signal_to_bars(signal_level)
        #return f"{'|' * signal_bars + '-' * (5-signal_bars)} ({signal_level})"
        return f"{'|' * signal_bars + '-' * (5-signal_bars)}"
    else:
        return "-----"


# üåô –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
connected_state = {"connected": False, "mac": None}
CHECK_INTERVAL = 1  # —Å–µ–∫—É–Ω–¥
last_check_time = 0

CURRENT_WINDOW_SIZE = 10
current_readings = deque(maxlen=CURRENT_WINDOW_SIZE)
baseline_current = None
CURRENT_DELTA_THRESHOLD = 50  # –º–ê

def is_esp_powered_by_current():
    global baseline_current

    try:
        current = ina.current  # –º–ê
        current_readings.append(current)

        if len(current_readings) < CURRENT_WINDOW_SIZE:
            return False  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

        median_current = statistics.median(current_readings)

        if baseline_current is None:
            baseline_current = median_current
            print(f"[INA219] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Ç–æ–∫ (–º–µ–¥–∏–∞–Ω–∞): {baseline_current:.1f} –º–ê")
            return False

        delta = median_current - baseline_current
        print(f"[INA219] –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ç–æ–∫: {median_current:.1f} –º–ê, Œî: {delta:.1f} –º–ê")

        return delta > CURRENT_DELTA_THRESHOLD

    except Exception as e:
        print(f"[INA219] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–∞: {e}")
        return False

def check_esp_connection():
    global last_check_time
    now = time.time()
    if now - last_check_time < CHECK_INTERVAL:
        return  # –Ω–µ –ø–æ—Ä–∞ –µ—â—ë
    last_check_time = now

    if connected_state["connected"]:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ —Ç–æ–∫—É, –Ω–µ –æ—Ç–≤–∞–ª–∏–ª–∞—Å—å –ª–∏
        if not is_esp_powered_by_current():
            print("‚ùå ESP –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–ø–æ —Ç–æ–∫—É)")
            connected_state["connected"] = False
            connected_state["mac"] = None
    else:
        # –ï—Å—Ç—å —Ç–æ–∫ ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å MAC
        if is_esp_powered_by_current():

            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ESP")
            connected_state["connected"] = True
            connected_state["mac"] = None

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def status_updater():
    while True:
        battery = get_battery_status()
        wifi = get_wifi_status()
        charging = is_charging()





        update_status_data(battery, wifi, charging)
        time.sleep(0.2)
