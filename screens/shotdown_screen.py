#screens/shotdown_screen.py

import asyncio
import os
import time
import state
from oled_ui import show_message, clear, st_device
import RPi.GPIO as GPIO




async def run_shotdown_halt():
    print("‚ö†Ô∏è –ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è...")

    countdown = 10
    shutdown_start = time.time()

    for i in range(countdown, 0, -1):
        elapsed_since_start = time.time() - shutdown_start
        activity_elapsed = time.time() - state.last_activity_time[0]

        if activity_elapsed < elapsed_since_start:
            print("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            if st_device:
                st_device.set_backlight_level(100)
            state.shutdown_pending = False
            return

        show_message(f"–í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {i} —Å–µ–∫")
        await asyncio.sleep(1)

    print("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")

    if st_device:
        clear()
        st_device.set_backlight(False)


    #state.shutdown_pending = False
    await asyncio.sleep(0.5)

    cleanup_and_shutdown()

        # üõë –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Python-–ø—Ä–æ—Ü–µ—Å—Å
    #os._exit(0)


def cleanup_and_shutdown():
    print("‚öôÔ∏è –í—ã–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∏ —á–∏—Å—Ç–∏–º GPIO –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º...")
    state.status_updater_running = False

    try:
        GPIO.setmode(GPIO.BCM)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ –ª—é–±–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPIO
        BACKLIGHT_PIN = 12

        GPIO.setup(BACKLIGHT_PIN, GPIO.OUT)
        GPIO.output(BACKLIGHT_PIN, GPIO.LOW)
        #GPIO.cleanup()  # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    except Exception as e:
        print(f"[GPIO Cleanup Error] {e}")

    os.system("sudo halt")  # –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ root
