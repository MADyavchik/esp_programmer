# screens/print_screen.py
import asyncio
from oled_ui import show_message, clear
from printer_functions import print_mac_address, printer_connection, disconnect_from_printer, connect_to_printer
from utils import log_async
import state
from oled_ui import animate_activity


@log_async
async def run_print_screen():
    clear()
    show_message("–ü–µ—á–∞—Ç—å MAC...")
    await asyncio.sleep(0.5)

    mac_address = state.mac_address

    if printer_connection["connected"] and printer_connection.get("printer"):
        try:
            # ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏
            stop_event = asyncio.Event()
            animation_task = asyncio.create_task(animate_activity(stop_event, message="–ü–µ—á–∞—Ç—å..."))

            # üñ®Ô∏è –ü–µ—á–∞—Ç—å MAC-–∞–¥—Ä–µ—Å–∞
            await print_mac_address(
                printer_connection["printer"],
                mac_address,
                config=printer_connection["config"]
            )

            # ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            stop_event.set()
            await animation_task

            # ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            clear()
            show_message("MAC –Ω–∞–ø–µ—á–∞—Ç–∞–Ω")

        except Exception as e:
            clear()
            show_message("–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏")
            print(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
    else:
        clear()
        show_message("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

    await asyncio.sleep(2)
    return "log"
@log_async
async def run_print_connect():
    clear()
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    if printer_connection["connected"]:
        await disconnect_from_printer()
    else:
        show_message("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await connect_to_printer()

    return "settings"
