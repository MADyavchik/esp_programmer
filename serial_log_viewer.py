import asyncio
import subprocess
from utils import log_async
import re
from oled_ui import draw_log_table, clear
from buttons import btn_back
from buttons import setup_buttons
from oled_ui import show_message

# –°—Ç—Ä–æ–≥–æ –±–µ–∑ IGNORECASE –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π
LOG_PATTERN = re.compile(r"(Battery|Temp|TOF|Weight):\s*(-?\d+)")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
EXTRA_PATTERNS = {
    "Battery": re.compile(r"BATTERY\s+\[(OK|FAIL)\]\s+(\d+)"),
    "Temp": re.compile(r"1WIRE Temperature\s+\[(OK|FAIL)\]\s+Temp:\s+(\d+)"),
    "Weight": re.compile(r"WEIGHT\s+\[(OK|FAIL)\]\s+Read\s+(-?\d+)"),
    "CPU Temp": re.compile(r"CPU TEMP\s+\[(OK|FAIL)\]\s+(\d+)"),
    "DOM.Online": re.compile(r"SSID\s+DOM\.Online\s+RSSI:\s+(-?\d+)")
}

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
values = {
    "Battery": {"value": "‚Äî", "status": None},
    "Temp": {"value": "‚Äî", "status": None},
    "TOF": {"value": "‚Äî", "status": None},
    "Weight": {"value": "‚Äî", "status": None},
    "CPU Temp": {"value": "‚Äî", "status": None},
    "DOM.Online": {"value": "‚Äî", "status": None}
}

async def monitor_serial_data(proc, stop_event):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ UART"""
    draw_log_table(values)

    while not stop_event.is_set():
        try:
            line = await asyncio.wait_for(proc.stdout.readline(), timeout=1.0)
        except asyncio.TimeoutError:
            continue
        except Exception as e:
            print(f"Readline error: {e}")
            break

        if not line:
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã–ª—Å—è")
            break

        line = line.decode("utf-8", errors="ignore").strip()
        print(f"Received line: {line}")

        # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        match = LOG_PATTERN.search(line)
        if match:
            key, val = match.groups()
            if key in values:
                values[key]["value"] = val
                values[key]["status"] = "white"
                draw_log_table(values)
            continue

        # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        for key, pattern in EXTRA_PATTERNS.items():
            match = pattern.search(line)
            if match:
                if len(match.groups()) == 2:
                    status, value = match.groups()
                    values[key]["value"] = f"{value}"
                    values[key]["status"] = "lime" if status == "OK" else ("red" if status == "FAIL" else "white")
                else:
                    value = match.group(1)
                    values[key]["value"] = value
                    values[key]["status"] = "white"
                draw_log_table(values)
                break


@log_async
async def show_serial_data():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    clear()
    stop_event = asyncio.Event()

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞
    try:
        proc = await asyncio.create_subprocess_exec(
            "platformio", "device", "monitor", "--baud", "115200", "--port", "/dev/ttyS0",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
    except Exception as e:
        show_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:\n{e}")
        await asyncio.sleep(2)
        clear()
        return "flash"

    # –°—Ç–∞—Ä—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è stderr
    asyncio.create_task(log_stderr(proc))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    def handle_back():
        stop_event.set()

    setup_buttons(None, None, handle_back, None)

    # –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_task = asyncio.create_task(monitor_serial_data(proc, stop_event))

    # –ñ–¥—ë–º –≤—ã—Ö–æ–¥–∞
    await stop_event.wait()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∞—Å–∫
    if not monitor_task.done():
        monitor_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            pass

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    try:
        proc.terminate()
        await asyncio.wait_for(proc.wait(), timeout=3)
    except Exception:
        proc.kill()

    clear()
    return "flash"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
async def log_stderr(proc):
    while True:
        try:
            line = await asyncio.wait_for(proc.stderr.readline(), timeout=1.0)
            if not line:
                break  # –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–ª–∏ stderr –∑–∞–∫—Ä—ã–ª—Å—è
            print(f"‚ö†Ô∏è STDERR: {line.decode().strip()}")
        except asyncio.TimeoutError:
            continue  # –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é stderr
        except Exception as e:
            print(f"‚ùå log_stderr error: {e}")
            break



