import asyncio
import subprocess
from utils import log_async
import re
from oled_ui import draw_log_table, clear
from buttons import btn_back
from buttons import setup_buttons
from oled_ui import show_message

import time

# –°—Ç—Ä–æ–≥–æ –±–µ–∑ IGNORECASE –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π
LOG_PATTERN = re.compile(r"(Battery|Temp|TOF|Weight):\s*(-?\d+)")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
EXTRA_PATTERNS = {
    "Battery": re.compile(r"BATTERY\s+\[(OK|FAIL)\]\s+(\d+)"),
    "Temp": re.compile(r"1WIRE Temperature\s+\[(OK|FAIL)\]\s+Temp:\s+(\d+)"),
    "Weight": re.compile(r"WEIGHT\s+\[(OK|FAIL)\]\s+Read\s+(-?\d+)"),
    "CPU Temp": re.compile(r"CPU TEMP\s+\[(OK|FAIL)\]\s+(\d+)"),
    "DOM.Online": re.compile(r"SSID\s+DOM\.Online\s+RSSI:\s+(-?\d+)")
}

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
values = {
    "Battery": {"value": "‚Äî", "status": None},
    "Temp": {"value": "‚Äî", "status": None},
    "TOF": {"value": "‚Äî", "status": None},
    "Weight": {"value": "‚Äî", "status": None},
    "CPU Temp": {"value": "‚Äî", "status": None},
    "DOM.Online": {"value": "‚Äî", "status": None}
}

async def monitor_serial_data(proc, stop_event):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ UART"""
    draw_log_table(values)
    last_line_time = time.time()

    while not stop_event.is_set():
        try:
            line = await asyncio.wait_for(proc.stdout.readline(), timeout=1.0)

            if not line:
                print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã–ª—Å—è")
                show_message("Disconnect..")
                stop_event.set()
                break

            line = line.decode("utf-8", errors="ignore").strip()

            # üõë –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if line.startswith('---'):
                print(f"‚öôÔ∏è –°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {line}")
                continue

            print(f"Received line: {line}")
            last_line_time = time.time()

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            match = LOG_PATTERN.search(line)
            if match:
                key, val = match.groups()
                if key in values:
                    values[key]["value"] = val
                    values[key]["status"] = "white"
                    draw_log_table(values)
                continue

            # –î–æ–ø. –ø–∞—Ä—Å–∏–Ω–≥
            for key, pattern in EXTRA_PATTERNS.items():
                match = pattern.search(line)
                if match:
                    if len(match.groups()) == 2:
                        status, value = match.groups()
                        values[key]["value"] = f"{value}"
                        values[key]["status"] = (
                            "lime" if status == "OK"
                            else "red" if status == "FAIL"
                            else "white"
                        )
                    else:
                        value = match.group(1)
                        values[key]["value"] = value
                        values[key]["status"] = "white"
                    draw_log_table(values)
                    break

        except asyncio.TimeoutError:
            if time.time() - last_line_time > 5:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                show_message("–ù–µ—Ç —Å–≤—è–∑–∏")
                stop_event.set()
                break
            continue

        except Exception as e:
            print(f"Readline error: {e}")
            stop_event.set()
            break


@log_async
async def show_serial_data():
    clear()
    stop_event = asyncio.Event()

    try:
        proc = await asyncio.create_subprocess_exec(
            "platformio", "device", "monitor", "--baud", "115200", "--port", "/dev/ttyS0",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å monitor: {e}")
        show_message("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ monitor")
        await asyncio.sleep(2)
        return "flash"

    # stderr –ª–æ–≥
    asyncio.create_task(log_stderr(proc, stop_event))

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    def handle_back():
        print("‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞")
        stop_event.set()

    setup_buttons(None, None, handle_back, None)

    monitor_task = asyncio.create_task(monitor_serial_data(proc, stop_event))

    # –ñ–¥–µ–º –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–≥–≥–µ—Ä–∞
    await stop_event.wait()

    # –ü—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    if proc.returncode is None:
        proc.terminate()
        try:
            await asyncio.wait_for(proc.wait(), timeout=3)
        except asyncio.TimeoutError:
            proc.kill()

    # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if not monitor_task.done():
        monitor_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            pass

    clear()
    return "flash"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
async def log_stderr(proc, stop_event):
    while True:
        try:
            line = await asyncio.wait_for(proc.stderr.readline(), timeout=1.0)
            if not line:
                break
            text = line.decode(errors="ignore").strip()
            print(f"‚ö†Ô∏è STDERR: {text}")
            if "disconnected" in text.lower() or "unavailable" in text.lower():
                print("üõë –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")
                show_message("Disconnected")
                stop_event.set()
                break
        except asyncio.TimeoutError:
            continue
        except Exception as e:
            print(f"‚ùå log_stderr error: {e}")
            break



